#! /bin/bash

EXEC_OPTION="${1^^}"
CHIT_JAR=""
CHIT_PID=""
CHIT_RUNNING=""
CHIT_STATUS_MSG=""

function _chit_start() {
  _get_chit_pid

  if [[ "${CHIT_RUNNING}" != "NO" ]]; then
    echo "Unable to start the chit. The current running status is: ${CHIT_RUNNING}"
    _display_running_chit
    exit 1
  fi

  _get_chit_jar

  echo "Starting the chit using cmd: nohup java -jar ${CHIT_JAR} &"
  echo "Once executed, this will not return you back to the command prompt until you hit return"

  nohup java -jar "${CHIT_JAR}" &
}

function _chit_status() {
  _get_chit_pid
  echo "${CHIT_STATUS_MSG}"
  _display_running_chit
}

function _chit_stop() {
  _chit_status

  if [[ "${CHIT_RUNNING}" == "NO" ]]; then
    exit 0
  elif [[ "${CHIT_RUNNING}" == "ERROR" ]]; then
    echo "ERROR: Must identify and kill process manually"
    exit 1
  fi

  _kill_the_chit
  _chit_status

  if [[ "${CHIT_RUNNING}" != "NO" ]]; then
    echo "Something went wrong and the process is still running"
    _display_running_chit
    exit 1
  else
    echo "Application successfully stopped"
  fi
}

function _chit_how_to() {
  echo -e "

  This process supports 3 options:
  $0 START  - This will use nohup and & to start the process in the background
  $0 STATUS - Displays any running instances
  $0 STOP   - This will use pgrep -f to find the pid and kill it

  Things to note:
  \t* Run this from the directory which contains the jar, it won't work otherwise.
  \t* If the script finds more than 1 jar, it picks the newest based on last update date.
  \t* If no process is found to kill, nothing happens.
  "
}

function _display_running_chit() {
  for pid in ${CHIT_PID}; do
    # shellcheck disable=SC2009
    ps auxww| grep " ${pid} " | grep -v grep
  done
}

function _get_chit_jar() {
  # shellcheck disable=SC2012
  CHIT_JAR=$(ls -tr chitstop-*.jar 2>/dev/null | tail -1)
  local chitJarCount
  chitJarCount=$(echo "${CHIT_JAR}" | wc -w)

  if [[ "${chitJarCount}" -eq 0 ]]; then
    echo "Unable to find the jar in the run directory"
    echo "This command should be run from the directory which contains the chitstop jar"
    exit 1
  else
    echo "Jar found: ${CHIT_JAR}"
  fi
}

function _get_chit_pid() {
  CHIT_PID=$(pgrep -f 'java -jar chitstop-.*')
  local chitPidCount
  chitPidCount=$(echo "${CHIT_PID}" | wc -w)

  if [[ "${chitPidCount}" -eq 0 ]]; then
    CHIT_RUNNING="NO"
    CHIT_STATUS_MSG="The chitstop application is not running."
  elif [[ "${chitPidCount}" -gt 1 ]]; then
    CHIT_RUNNING="ERROR"
    CHIT_STATUS_MSG="Multiple instances of the chitstop application are running."
  else
    CHIT_STATUS_MSG="Found a single instance of the chitstop application running."
    CHIT_RUNNING="YES"
  fi
}

function _kill_the_chit() {
  echo "KILLING PID: ${CHIT_PID}"
  kill -9 "${CHIT_PID}"
  sleep 2
}

## RUN ##
if [[ "${EXEC_OPTION}" == "START" ]]; then
  _chit_start
elif [[ "${EXEC_OPTION}" == "STATUS" ]]; then
  _chit_status
elif [[ "${EXEC_OPTION}" == "STOP" ]]; then
  _chit_stop
else
  _chit_how_to
fi